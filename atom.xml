<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[shengsheng的博客]]></title>
  <link href="http://www.shengsheng.net/atom.xml" rel="self"/>
  <link href="http://www.shengsheng.net/"/>
  <updated>2021-06-16T19:23:50+08:00</updated>
  <id>http://www.shengsheng.net/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[nginx前后端分离的一些配置]]></title>
    <link href="http://www.shengsheng.net/16240150077955.html"/>
    <updated>2021-06-18T19:16:47+08:00</updated>
    <id>http://www.shengsheng.net/16240150077955.html</id>
    <content type="html"><![CDATA[
<p>之前的都是多个域名，现在打算采用分离的形式</p>

<h2 id="toc_0">fpm模式</h2>

<pre><code class="language-text">server {
        index index.html index.htm index.php;
        root /webwww/www/landpage/Public/dist;
        server_name landpage.xx.com;
  listen 443;
  listen 80;
  ssl on;
  ssl_certificate /webwww/ssl/1_.cn_bundle.crt;
  ssl_certificate_key /webwww/ssl/2_.cn.key;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置
  ssl_prefer_server_ciphers on;
        location  / {
                #alias /webwww/www/landpage/Public/dist;             #项目路径
                index index.html;
                try_files $uri $uri/ /index.html;
        }
        location /api {
          root /webwww/www/landpage/Public;
          if (!-e $request_filename){
             rewrite ^/(.*)$ /index.php?s=$1 last;
             break;
          }
          try_files $uri $uri/ /index.php;
        }
        location ~ [^/]\.php(/|$) {
                root  /webwww/www/landpage/Public;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass 172.17.0.7:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                #fastcgi_param   SCRIPT_FILENAME         $request_filename;
                fastcgi_param PATH_INFO       $fastcgi_path_info;
        }
}
</code></pre>

<h1 id="toc_1">nginx查看php-fpm状态</h1>

<p>php-fpm需要配置一下</p>

<pre><code class="language-text">[www]
user = www-data
group = www-data
listen = 127.0.0.1:9000
pm = dynamic
pm.max_children = 20
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 10
;pm.process_idle_timeout = 300
pm.max_requests = 10000
pm.status_path = /status_show
slowlog = /webwww/log/php-fpm-slow.log
</code></pre>

<p>nginx增加location</p>

<pre><code class="language-text">location ~^/status_show$ {
        fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
        include fastcgi_params;
        fastcgi_pass 172.17.0.2:9000;
}
</code></pre>

<p>查看本域名/status_show?full即所有连接<br/>
/status_show还可以指定json、html和xml的方式显示</p>

<p><img src="media/16240150077955/16240153140050.jpg" alt=""/></p>

<h1 id="toc_2">proxy模式</h1>

<pre><code class="language-text">server {
        listen 443;
        listen 80;
        ssl on;
        ssl_certificate /webwww/ssl/1_.cn_bundle.crt;
        ssl_certificate_key /webwww/ssl/2_.cn.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
        server_name jumpuser.xxx.cn;
        root /webwww/www/jumpuser/Public/dist;
        location  / {
                index index.html;
                try_files $uri $uri/ /index.html;
        }
       location /api {
                proxy_pass http://172.19.0.2:8080;
                proxy_http_version 1.1;
                proxy_set_header X-Real-IP $remote_addr;
        }
        index index.html index;
}
</code></pre>

<p>以上配置都是访问/api开头走后台，默认其它路径走前端， 后端项目必须使用强路由的形式。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[websocket踩坑记]]></title>
    <link href="http://www.shengsheng.net/16238418040587.html"/>
    <updated>2021-06-16T19:10:04+08:00</updated>
    <id>http://www.shengsheng.net/16238418040587.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">基本配置</h2>

<p>为了解决知道用户时长，我们采用了websocket作为通讯,php采用了swoole的websocket功能。<br/>
<img src="media/16238418040587/16238419003179.jpg" alt=""/></p>

<p>主要有三个事件<br/>
Open 建立链接的处理<br/>
Message 收到客户端的处理<br/>
Close 关闭与客户端的处理</p>

<p>前端配置基本和后端一样, http页面能访问ws和wss,但https只能访问wss。</p>

<pre><code class="language-text">var ws = new WebSocket(&quot;wss://xxx/websocket&quot;)
ws.onopen = function () { 
    ws.send(&quot;hello&quot;); 
}; 
ws.onmessage = function (resp) { 
    document.getElementById(&#39;total&#39;).innerHTML = resp.data; 
};
ws.onclose = function () {}; 
</code></pre>

<p>nginx配置：</p>

<pre><code class="language-text">upstream websocket {
    server 172.17.0.2:9507; # 如果只有一条可以直接放在proxy_pass里
}
location /websocket {
          proxy_pass http://websocket;
          proxy_read_timeout 60s;
          proxy_send_timeout 60s;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection &quot;upgrade&quot;;
}
</code></pre>

<p>链接的时候可以可以参数放在后面，服务器能从get里获取token参数进行鉴权<br/>
wss://test.com/websocket?token=abcdefg</p>

<p><img src="media/16238418040587/16238421223263.jpg" alt=""/></p>

<p>需要注意，如果是启用swoole里面的ssl功能，需将proxy_pass的 http://websocket 改成https://websocket</p>

<p>因为我们默认wss走443端口，而我们443端口已经有配置证书，故直接走http://websocket即可。</p>

<h2 id="toc_1">心跳</h2>

<p>因为我们默认服务器配置是60秒时候，所以前端或后端定时发送数据来维护链接即可。</p>

<pre><code class="language-text"> proxy_read_timeout 60s;
 proxy_send_timeout 60s;
</code></pre>

<p>前端</p>

<pre><code class="language-text">setInterval(wx.send(&#39;1&#39;),100000); 
</code></pre>

<h2 id="toc_2">腾讯云的坑</h2>

<p>如果是从CDN走websocket,默认也是支持的，默认根据源站的配置，走80端口。<br/>
链接是能链接，但是wss的时候会出现ws.send不了数据。 如果要使用websocket建议使用ECDN(全站加速）</p>

<h3 id="toc_3">官方说明</h3>

<p>cdn是提供网站静态内容的加速分发处理能力，ECDN 为纯动态网站与动静态混合型网站提供高可靠、低延时一站式加速服务。具体您可以了解下对应产品的功能介绍<br/>
CDN的应用场景：<a href="https://cloud.tencent.com/document/product/228/37846">https://cloud.tencent.com/document/product/228/37846</a><br/>
ECDN的功能介绍：<a href="https://cloud.tencent.com/document/product/570/10359">https://cloud.tencent.com/document/product/570/10359</a></p>

<h3 id="toc_4">其它</h3>

<p>附：<br/>
cdn的协议跟随引发的问题<br/>
WARNING ssl_accept: bad SSL client[127.0.0.1:35418], reason=156, error_string=http request #4068<br/>
这个错误说明有明文 HTTP 请求发送到了 SSL 的 HTTPS 端口。<br/>
<a href="https://github.com/swoole/swoole-src/issues/4068#event-4585154187">https://github.com/swoole/swoole-src/issues/4068#event-4585154187</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[laravel database源码分析]]></title>
    <link href="http://www.shengsheng.net/16227343785198.html"/>
    <updated>2021-06-03T23:32:58+08:00</updated>
    <id>http://www.shengsheng.net/16227343785198.html</id>
    <content type="html"><![CDATA[
<p>公司框架采用了laravel的Eloquent用为数据库的orm</p>

<pre><code class="language-text">// 使用Manager管理数据库
use Illuminate\Database\Capsule\Manager as Db;
self::$db = new Db;
            foreach($dbconfig as $connection_name =&gt; $config)
            {
                $db_arr = [
                    &#39;driver&#39;    =&gt; $config[&#39;dbtype&#39;] ?? &#39;mysql&#39;, 
                    &#39;host&#39;      =&gt; $config[&#39;host&#39;],
                    &#39;port&#39;      =&gt; $config[&#39;port&#39;],
                    &#39;database&#39;  =&gt; $config[&#39;dbname&#39;],
                    &#39;username&#39;  =&gt; $config[&#39;username&#39;],
                    &#39;password&#39;  =&gt; $config[&#39;password&#39;],
                    &#39;charset&#39;   =&gt; $config[&#39;charset&#39;] ?? &#39;utf8&#39;,
                    &#39;collation&#39; =&gt; $config[&#39;collation&#39;] ?? &#39;utf8_general_ci&#39;,
                    &#39;prefix&#39;    =&gt; &#39;&#39;,
                ];
                self::$db-&gt;addConnection($db_arr,$connection_name);
            }
            // self::$db-&gt;setEventDispatcher(new Dispatcher(new Container));
            // 设置fetch的方式
            self::$db-&gt;setFetchMode(\PDO::FETCH_ASSOC);
            self::$db-&gt;setAsGlobal();
            self::$db-&gt;bootEloquent();
</code></pre>

<p><img src="media/16227343785198/D74AAFF0-9A24-4363-A137-1DE400BDAAC2.png" alt="D74AAFF0-9A24-4363-A137-1DE400BDAA"/></p>

<p>setAsGlobal更新instance对象<br/>
bootEloquent开始启用。</p>

<p>常用原生用法，使用connection类<br/>
query()<br/>
select()<br/>
cursor()<br/>
prepared()<br/>
getPdoForSelect()<br/>
unprepared()<br/>
run()<br/>
runQueryCallback()<br/>
logQuery()<br/>
getQueryLog()</p>

<p><img src="media/16227343785198/16227346790325.jpg" alt=""/></p>

<p>Manger作为facade Db的使用<br/>
调用conneciton()</p>

<p>Manager::connection(&#39;default&#39;)-&gt;select(&quot;select * from test&quot;);<br/>
<img src="media/16227343785198/9EA336CE-166B-46F9-94A9-BFC18FB5CB04.png" alt="9EA336CE-166B-46F9-94A9-BFC18FB5CB04"/><br/>
查看databae\PDO\Connection.php和databse\Conneciton查看实现的方法。</p>

<p><img src="media/16227343785198/6B3646A2-BEA9-4479-888A-BEC4976E11CB.png" alt="6B3646A2-BEA9-4479-888A-BEC4976E11CB"/></p>

<p><img src="media/16227343785198/62B486D9-97E8-4605-A65E-71FB73D4AC4A.png" alt="62B486D9-97E8-4605-A65E-71FB73D4AC4A"/></p>

<p>其实比较好用的游标，使用原生协程来跟进多数据fetch</p>

<p>另一个值得学习的databse\Eloquent\Model类，orm神器<br/>
<img src="media/16227343785198/9164A66F-0560-4CC0-AA23-BB36CF094644.png" alt="9164A66F-0560-4CC0-AA23-BB36CF094644"/></p>

<p>可以查看出优美地调用__call和__callStatic</p>

<p>在databse\Eloquent\Builder可以发现更多orm的使用方法<br/>
例如<br/>
updateOrCreate<br/>
firstOrFail<br/>
<img src="media/16227343785198/90CAC82C-CC07-4E6D-82FE-24B30AEB6F51.png" alt="90CAC82C-CC07-4E6D-82FE-24B30AEB6F51"/></p>

<p>查看源码，值得学习大神处理的逻辑。<br/>
基本上都是静态的方式调用</p>

<p><img src="media/16227343785198/68ED5D5A-2B51-4A67-99DC-5B806E956D1A.png" alt="68ED5D5A-2B51-4A67-99DC-5B806E956D1A"/></p>

<p>相对应有些失败之后还有重连的机制。</p>

<p>大概源码查看到此，基本上学习此源码，orm足够使用的了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git管理迁移]]></title>
    <link href="http://www.shengsheng.net/16219577161349.html"/>
    <updated>2021-05-25T23:48:36+08:00</updated>
    <id>http://www.shengsheng.net/16219577161349.html</id>
    <content type="html"><![CDATA[
<p>由于之前gitlab管理是使用k8s来弄，但没把数据挂载在本地硬盘，所以可能会有故障，因此为了减了运维压力。<br/>
jenkins采用腾讯去的cloudbase。<br/>
git管理由私有gitlab改到gitee上。</p>

<p>cloudbase jenkins应用:<br/>
<img src="media/16219577161349/0D79715F-C247-43F0-AD38-80FF7B0E94A8.png" alt="0D79715F-C247-43F0-AD38-80FF7B0E94A8"/></p>

<p>gitee:<br/>
<img src="media/16219577161349/80F68D19-D3F6-4A5A-874E-9AF1329FEC79.png" alt="80F68D19-D3F6-4A5A-874E-9AF1329FE"/></p>

<p><img src="media/16219577161349/16219577181650.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[现有安卓手机]]></title>
    <link href="http://www.shengsheng.net/16217270801027.html"/>
    <updated>2021-05-23T07:44:40+08:00</updated>
    <id>http://www.shengsheng.net/16217270801027.html</id>
    <content type="html"><![CDATA[
<p>现在的安卓手机其实相比之前，cpu和内存增大就肯定不用说了，主要是快速，从0到充满也就用了15分钟。和苹果相等的价钱，现有的安卓手机并不差。<br/>
ad一下，iqoo7。</p>

<p><img src="media/16217270801027/16217272147047.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[elasticsearch做服务端监控]]></title>
    <link href="http://www.shengsheng.net/16217265079986.html"/>
    <updated>2021-05-23T07:35:07+08:00</updated>
    <id>http://www.shengsheng.net/16217265079986.html</id>
    <content type="html"><![CDATA[
<p>在kibana里其实很容易查看到具体的使用情况<br/>
<img src="media/16217265079986/9490AE60-49A0-4DBE-98A1-ADBA30DC3944.png" alt="9490AE60-49A0-4DBE-98A1-ADBA30D"/></p>

<p>但发觉没报警机制，例如发送短信和钉钉报警(钉钉主要拉机器人，这里不做详细介绍)。</p>

<p><code><br/>
&quot;elasticsearch/elasticsearch&quot;: &quot;^7.0&quot;<br/>
</code><br/>
首先在composer里加载elasticsearch的开源组件</p>

<p>核心代码如下：</p>

<pre><code class="language-text"> public static function getSearch($type = &#39;&#39;, $hostname = &#39;k8s-slave02&#39;)
    {
        $searchtype = &#39;&#39;;
        switch($type)
        {
            case &#39;diskio&#39;:
                $searchtype = &#39;system.diskio&#39;;
                break;
            case &#39;network&#39;:
                $searchtype = &#39;system.network&#39;;
                break;
            case &#39;cpu&#39;:
                $searchtype = &#39;system.cpu&#39;;
                break;
            case &#39;memory&#39;:
                $searchtype = &#39;system.memory&#39;;
                break;
            case &#39;filesystem&#39;:
                $searchtype = &#39;system.filesystem&#39;;
                break;
            default:
                $searchtype = &#39;&#39;;
                break;
        }
        if(empty($client))
        {
            $hosts = \SilangPHP\Config::get(&quot;Db.elasticsearch&quot;);
            self::$client = ClientBuilder::create()-&gt;setHosts($hosts)-&gt;build();
        }
        $params = [
            &#39;index&#39; =&gt; &#39;metricbeat-7.5.1&#39;,
            &#39;type&#39; =&gt; &#39;_doc&#39;,
            &#39;sort&#39; =&gt; &#39;@timestamp:desc&#39;,
            &#39;size&#39; =&gt; 1,
            &#39;body&#39; =&gt; [
                &#39;query&#39; =&gt; [
                    &#39;bool&#39; =&gt; [
                        &#39;must&#39; =&gt; [
                            [ &#39;match&#39; =&gt; [ &#39;host.hostname&#39; =&gt; $hostname ] ],
                            // system.diskio | docker.cpu system.network load  system.cpu system.process.summary system.process.summary
                            [ &#39;match&#39; =&gt; [ &#39;event.dataset&#39; =&gt; $searchtype ] ],
                        ]
                    ]
                ]
            ]
        ];
        $results = self::$client-&gt;search($params);
        $milliseconds = $results[&#39;took&#39;];
        $maxScore     = $results[&#39;hits&#39;][&#39;max_score&#39;];
        $score = $results[&#39;hits&#39;][&#39;hits&#39;][0][&#39;_score&#39;];
        $doc   = $results[&#39;hits&#39;][&#39;hits&#39;][0][&#39;_source&#39;];
        return $doc;
    }
</code></pre>

<p>主要通过匹配搜索host.hostname主机名称和event.dataset事件来获取相关信息，为了获取最新的来报警，排序使用@timestamp:desc时间倒序来获取。</p>

<p>汇总发送效果<br/>
<img src="media/16217265079986/16217269052143.jpg" alt=""/></p>

<p>规则报警得大家自己去定义，例如内存高于80%的时候触发报警。<br/>
使用过某些开源的监控工具，其实也没精力去学习更多，也相对复杂，简单有简单的好处。<br/>
相比第一版报警系统，现在的其实可观很多<sup>_^</sup></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于doge]]></title>
    <link href="http://www.shengsheng.net/16207910317257.html"/>
    <updated>2021-05-12T11:43:51+08:00</updated>
    <id>http://www.shengsheng.net/16207910317257.html</id>
    <content type="html"><![CDATA[
<p>其实并没有很多人口中实现了财务自由，只是2017年的时候买了些狗币，忘记售出去了，刚好这段时间火，上去看了一下。倒是有台思域车。<br/>
<img src="media/16207910317257/4701620791137_.pic.jpg" alt="4701620791137_.pic"/><br/>
<img src="media/16207910317257/4711620791138_.pic.jpg" alt="4711620791138_.pic"/></p>

<p>马克斯的神助攻，动物币都有所上升。<sup>_^</sup></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试用NIID R1单肩包]]></title>
    <link href="http://www.shengsheng.net/16182383814337.html"/>
    <updated>2021-04-12T22:39:41+08:00</updated>
    <id>http://www.shengsheng.net/16182383814337.html</id>
    <content type="html"><![CDATA[
<p>从抖音看到一款比较好的单肩包，然后入手了,说明书如下<br/>
<img src="media/16182383814337/16182384216839.jpg" alt=""/></p>

<p>体验待更新</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[记录外部跳转微信小程序]]></title>
    <link href="http://www.shengsheng.net/16172050445392.html"/>
    <updated>2021-03-31T23:37:24+08:00</updated>
    <id>http://www.shengsheng.net/16172050445392.html</id>
    <content type="html"><![CDATA[
<p>有个需求是通过短信，点击http自动跳转到微信小游戏<br/>
查阅相关资料<br/>
<code><br/>
weixin://dl/business/?<br/>
</code><br/>
主要使用/dl/bussiness来实现跳转，搜索之后很多收费的跳转服务。其实大不必使用收费的<br/>
<img src="media/16172050445392/16172053107904.jpg" alt=""/></p>

<h1 id="toc_0">微信官方功能</h1>

<p><a href="https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-scheme/urlscheme.generate.html">https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-scheme/urlscheme.generate.html</a></p>

<p><img src="media/16172050445392/16172053877136.jpg" alt=""/></p>

<p>使用应用的acess_token访问即可生成永久的openlink,可以跳转到指定path和query。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[上传大文件关键分析]]></title>
    <link href="http://www.shengsheng.net/16170741748938.html"/>
    <updated>2021-03-30T11:16:14+08:00</updated>
    <id>http://www.shengsheng.net/16170741748938.html</id>
    <content type="html"><![CDATA[
<p>php写了个upload,在大文件的时候经常失败，某些项目还是nginx+fpm的通讯<br/>
排查之后，几个关键点配置</p>

<h2 id="toc_0">nginx相关</h2>

<h3 id="toc_1">与php fpm相关</h3>

<pre><code class="language-text">fastcgi_connect_timeout 6000;
fastcgi_send_timeout 6000;
fastcgi_read_timeout 6000;
fastcgi_buffer_size 256k;
fastcgi_buffers 8 256k;
fastcgi_busy_buffers_size 256k;
fastcgi_temp_file_write_size 256k;
</code></pre>

<h3 id="toc_2">非fpm相关</h3>

<pre><code class="language-text">proxy_connect_timeout         60s;
proxy_read_timeout            1m;
proxy_send_timeout            1m;
</code></pre>

<h3 id="toc_3">客户端与nginx连通</h3>

<pre><code class="language-text">keepalive_timeout  100;
client_max_body_size    1000m;
client_header_timeout         1m;
client_body_timeout           1m;
</code></pre>

<h2 id="toc_4">php相关</h2>

<p>配置</p>

<pre><code class="language-text">cat  &gt;  docker-php-ext-php.ini  &lt;&lt;hh
upload_max_filesize = 1000M
post_max_size=1000M
hh
</code></pre>

<h1 id="toc_5">附</h1>

<p>cat写入方法方式<br/>
cat向文件中写入内容<br/>
写入：<br/>
cat  &gt;  test.txt  &lt;<hh<br/>
hello world<br/>
hh<br/>
追加：<br/>
cat  >&gt;  test.txt  &lt;&lt;hh<br/>
hello world<br/>
hh</p>

<h1 id="toc_6">参考链接</h1>

<p><a href="https://blog.csdn.net/joeyon1985/article/details/50036095">https://blog.csdn.net/joeyon1985/article/details/50036095</a><br/>
<a href="https://www.cnblogs.com/kevingrace/p/6093671.html">https://www.cnblogs.com/kevingrace/p/6093671.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sftp 连接不了]]></title>
    <link href="http://www.shengsheng.net/16165973270206.html"/>
    <updated>2021-03-24T22:48:47+08:00</updated>
    <id>http://www.shengsheng.net/16165973270206.html</id>
    <content type="html"><![CDATA[
<p>给特定的人开通指定的sftp权限<br/>
账号验证成功，但一直提示connection loast due to error 54</p>

<p><img src="media/16165973270206/16165977578327.jpg" alt=""/></p>

<p>使用命令行工具调试也是报连接不了<br/>
<img src="media/16165973270206/16165976290823.jpg" alt=""/></p>

<p>故查看/etc/ssh/sshd_config的配置</p>

<pre><code class="language-text"># Subsystem sftp        /usr/libexec/openssh/sftp-server
Subsystem sftp    internal-sftp
# Match可User和Group
Match Group sftp
        ChrootDirectory /webwww/ftpmwp
        X11Forwarding no
        AllowTcpForwarding no
        PasswordAuthentication yes
#       PermitTTY no
#       ForceCommand cvs server
        ForceCommand internal-sftp
</code></pre>

<p>配置也是没问题，翻阅资料之后，问题主要出在ChrootDirectory<br/>
在ftp目前之前都要root权限，共享文件夹修改成chown root:sftp /webwww/ftpmwp即可访问<br/>
<img src="media/16165973270206/16165976990376.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[更改iview Select组件]]></title>
    <link href="http://www.shengsheng.net/16165731476494.html"/>
    <updated>2021-03-24T16:05:47+08:00</updated>
    <id>http://www.shengsheng.net/16165731476494.html</id>
    <content type="html"><![CDATA[
<p>我们部门使用的统一后台框架是iview admin pro<br/>
旧系统使用的Select<br/>
<img src="media/16165731476494/16165733324633.jpg" alt=""/></p>

<p>iview的select, 搜索关键词之后，点击会自动清空<br/>
<img src="media/16165731476494/16165733621235.jpg" alt=""/></p>

<p>为了解决这个尴尬现象，我们修改一下Select组件<br/>
<img src="media/16165731476494/16165734399770.jpg" alt=""/><br/>
把官方的Select组件，复制到我们的项目中，注意有些依赖的相应修改一下，如果可以就进行分割。</p>

<p>分析代码之后<br/>
<img src="media/16165731476494/16165735076650.jpg" alt=""/></p>

<p>因为iview values发生变化的时候，会清后掉query的查询，我们把这行注释掉就ok。<br/>
效果如下：<br/>
<img src="media/16165731476494/16165735738942.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[铁三角耳机]]></title>
    <link href="http://www.shengsheng.net/16140937756678.html"/>
    <updated>2021-02-23T23:22:55+08:00</updated>
    <id>http://www.shengsheng.net/16140937756678.html</id>
    <content type="html"><![CDATA[
<p>旧耳机纪念一下<br/>
<img src="media/16140937756678/16140937931978.jpg" alt=""/></p>

<p>铁三角m50xBT限量紫<br/>
<img src="media/16140937756678/16140938268565.jpg" alt=""/></p>

<p><img src="media/16140937756678/16140938347950.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[处理caid启发的php-rsa]]></title>
    <link href="http://www.shengsheng.net/16122577703139.html"/>
    <updated>2021-02-02T17:22:50+08:00</updated>
    <id>http://www.shengsheng.net/16122577703139.html</id>
    <content type="html"><![CDATA[
<p>一直觉得rsa无非就是私钥加解密，公钥加解密。<br/>
过长的字符串公钥加解密是要做处理的</p>

<h1 id="toc_0">加密</h1>

<pre><code class="language-text">public function EncryptData($source)
{
    $pub_key_string = &#39;-----BEGIN PUBLIC KEY-----
xx省略
-----END PUBLIC KEY-----&#39;;
    $t = openssl_get_publickey($pub_key_string);
    $crypttext = &#39;&#39;;
    foreach (str_split($source, 117) as $chunk) {
        openssl_public_encrypt($chunk, $encryptData, $t);
        $crypttext .= $encryptData;
    }
    return(base64_encode($crypttext));
}
</code></pre>

<p>按117长度划分加密</p>

<h1 id="toc_1">解密</h1>

<pre><code class="language-text">public function decrypt($encryptData){

        $pub_key_string = &#39;-----BEGIN PUBLIC KEY-----
省略php-pcks公钥
-----END PUBLIC KEY-----&#39;;
$t = openssl_pkey_get_public($pub_key_string);
        $crypttext = &#39;&#39;;
        $source = base64_decode($encryptData);
        foreach (str_split($source, 128) as $chunk) {
            openssl_public_decrypt($chunk, $dd, $pub_key_string);
            $crypttext .= $dd;
        }
        return trim($crypttext);
    }
</code></pre>

<p>按128长度划分解密</p>

<h1 id="toc_2">caid示例</h1>

<pre><code class="language-text">$json = [
    &#39;bootTimeInSec&#39; =&gt; &#39;1595643553&#39;,
    &#39;countryCode&#39; =&gt; &#39;CN&#39;,
    &#39;language&#39; =&gt; &#39;zh-Hans-CN&#39;,
    &#39;deviceName&#39; =&gt; &#39;e910dddb2748c36b47fcde5dd720eec1&#39;,
    &#39;systemVersion&#39; =&gt; &#39;14.0&#39;,
    &#39;machine&#39; =&gt; &#39;iPhone10,3&#39;,
    &#39;carrierInfo&#39; =&gt; &#39;中国移动&#39;,
    &#39;memory&#39; =&gt; &#39;3955589120&#39;,
    &#39;disk&#39; =&gt; &#39;63900340224&#39;,
    &#39;sysFileTime&#39; =&gt; &#39;1595214620.383940&#39;,
    &#39;model&#39; =&gt; &#39;D22AP&#39;,
    &#39;timeZone&#39; =&gt; &#39;28800&#39;,
];
$json = json_encode($json,JSON_UNESCAPED_UNICODE);
$result = $this-&gt;EncryptData($json);
$param = [
    &#39;dev_id&#39; =&gt; &#39;省略dev_id配置&#39;,
    &#39;encrypted_device_info&#39; =&gt; $result
];
// caid测试地址
$url = &quot;https://caid.china-caa.org/test/v1.0/get&quot;;
$result = http::postjson($url,$param);
</code></pre>

<h1 id="toc_3">总结</h1>

<p>值得注意的是，如果选择密钥是1024bit长的（openssl genrsa -out rsa_private_key.pem 1024），那么支持加密的明文长度字节最多只能是1024/8=128byte；<br/>
如果加密的padding填充方式选择的是OPENSSL_PKCS1_PADDING（这个要占用11个字节），那么明文长度最多只能就是128-11=117字节。如果超出，那么这些openssl加解密函数会返回false。<br/>
这时有个解决办法，把需要加密的源字符串按少于117个长度分开为几组，在解密的时候以172个字节分为几组。</p>

<h2 id="toc_4">参考链接</h2>

<p><a href="https://blog.csdn.net/leedaning/article/details/51780511">https://blog.csdn.net/leedaning/article/details/51780511</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php composer加载过慢处理]]></title>
    <link href="http://www.shengsheng.net/16118243270809.html"/>
    <updated>2021-01-28T16:58:47+08:00</updated>
    <id>http://www.shengsheng.net/16118243270809.html</id>
    <content type="html"><![CDATA[
<p>因为本地镜像切换了阿里镜像，但某些库加载特别慢，故排查一下</p>

<p>composer install的时候，看到获取github.com过慢的库</p>

<p>然后在composer.lock文件查看相关的配置<br/>
<img src="media/16118243270809/16118244379356.jpg" alt=""/></p>

<p>拼接之后得到镜像地址<br/>
<a href="https://mirrors.aliyun.com/composer/dists/nesbot/carbon/930ae59aea86acd6abba2ab9c84bcfe41b1b7eec.zip">https://mirrors.aliyun.com/composer/dists/nesbot/carbon/930ae59aea86acd6abba2ab9c84bcfe41b1b7eec.zip</a><br/>
点击确实下载不了，默认用回了github的源。</p>

<p>因为composer.json默认使用最小等级为dev<br/>
&quot;minimum-stability&quot;: &quot;dev&quot;<br/>
<img src="media/16118243270809/16118245304391.jpg" alt=""/></p>

<p>使用这个范围的时候会加载2-dev或dev-master版本，但国内的镜像源对dev版本并没有同步</p>

<p>所以去掉&quot;minimum-stability&quot;: &quot;dev&quot;配置和输入指定版本即可。</p>

<h1 id="toc_0">其它</h1>

<p>查看配置 </p>

<pre><code class="language-text">composer config -l -g 
</code></pre>

<p>如果不是使用阿里镜像源，可以切换一下</p>

<pre><code class="language-text">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/
</code></pre>

<p>暂时觉得阿里云的最好用，镜像60秒同步一次。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.js web框架]]></title>
    <link href="http://www.shengsheng.net/16081725657882.html"/>
    <updated>2020-12-17T10:36:05+08:00</updated>
    <id>http://www.shengsheng.net/16081725657882.html</id>
    <content type="html"><![CDATA[
<p>有个小服务，需要使用node.js运行，需要提供一个后台给运营人员使用，故使用node web框架来搭建。Egg.js是不错的选择，不过服务不需要那么大型，所以采用koa快速开发</p>

<h1 id="toc_0">使用到的node.js扩展</h1>

<pre><code class="language-text">// web框架
const Koa = require(&#39;koa&#39;);
// 路由
const router = require(&#39;koa-router&#39;)();
// 运行系统shell脚本
const shelljs = require(&#39;shelljs&#39;);
// http请求
const koaBody = require(&#39;koa-body&#39;);
// 文件操作
const fs = require(&#39;fs&#39;);
// 路径相关
const path = require(&quot;path&quot;);
// 静态资源服务器
const static = require(&#39;koa-static&#39;);
// zip压缩与解压
// const AdmZip = require(&#39;adm-zip&#39;);
// 支付中文版的adm-zip
const AdmZip = require(&#39;adm-zip-iconv&#39;);
</code></pre>

<h1 id="toc_1">router路由</h1>

<pre><code class="language-text">router.get(&#39;/test&#39;, async (ctx, next) =&gt; {
    console.log(ctx.response);
    ctx.response.body = &#39;&lt;h1&gt;test&lt;/h1&gt;&#39;;
});

// 导航
router.post(&#39;/nav&#39;, async (ctx, next) =&gt; {
    ctx.response.body = Nav;
});
</code></pre>

<h1 id="toc_2">核心功能</h1>

<pre><code class="language-text">function extractfile(filePath,filename)
{
    console.log(&#39;开始解压:&#39;+filePath);
    // 停两秒才继续上传
    sleep(2000);
    // 要上传完才能进行处理
    const filetmp = new AdmZip(filePath,&#39;GBK&#39;);
    filetmp.extractAllTo(&#39;./js3/&#39;+filename,true);  // output | js3
}

router.post(&#39;/upload&#39;, async (ctx, next) =&gt; {
    const file = ctx.request.files.gamezip; // 获取上传文件
    console.log(file.name);
    let filePath = path.join(__dirname, &#39;/zipupload/&#39;) + `${file.name}`;
    // 这里设置了异步
    console.log(&#39;开始上传&#39;);
    const reader = fs.createReadStream(file.path);
    const writer = fs.createWriteStream(filePath);
    reader.pipe(writer);
    reader.on(&#39;end&#39;, () =&gt; {
        console.log(&#39;上传成功&#39;);
        extractfile(filePath,file.name);
        var p1 = new Promise((resolve, reject) =&gt; {
            resolve(&#39;成功&#39;);
        });
        p1.then(function(){
            console.log(&quot; 【执行】：zsh obf_terser_dir.sh &quot; + &quot; auto&quot;+ctx.request.body.mixtype + &quot; &quot;+ctx.request.body.gameid);
            shelljs.exec( &quot; zsh obf_terser_dir.sh &quot; + &quot; auto&quot;+ctx.request.body.mixtype + &quot; &quot;+ctx.request.body.gameid, { async : true } ) ;
        })
        .then(
            console.log(&quot;end!&quot;)
        );
    });
    return ctx.body = Nav+&quot;&lt;p&gt;正在执行任务!&lt;/p&gt;&quot;;
});
</code></pre>

<h1 id="toc_3">运行程序</h1>

<pre><code class="language-text">const staticPath = &#39;/zip&#39;
const main2 = static(path.join(__dirname,staticPath));

// 查看静态文件
app.use(main2);
// 验证登录
app.use(authlogin);
// 操作相关
app.use(router.routes());

// app.use(main);
// 监听3000端口
app.listen(3000);
console.log(&#39;app started at port 3000...&#39;);
</code></pre>

<h1 id="toc_4">总结</h1>

<p>总的来说入门理解比较容易，能快速开发，基本完成这个项目只花了两天时间。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[华为hcip证书]]></title>
    <link href="http://www.shengsheng.net/16073046089051.html"/>
    <updated>2020-12-07T09:30:08+08:00</updated>
    <id>http://www.shengsheng.net/16073046089051.html</id>
    <content type="html"><![CDATA[
<p>h12-221,h12-222,h12-223,共三科。<br/>
<img src="media/16073046089051/16073046741619.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ELK数据分析]]></title>
    <link href="http://www.shengsheng.net/16045584516905.html"/>
    <updated>2020-11-05T14:40:51+08:00</updated>
    <id>http://www.shengsheng.net/16045584516905.html</id>
    <content type="html"><![CDATA[
<p>ELK（elasticsearch、logstash、kibana）,使用这个套件分析数据<br/>
logstash占用比较大，实际只用了filebeat作为分析使用。</p>

<h1 id="toc_0">搭建</h1>

<p>自己可以根据docker来搭建，当然也可以直接使用腾讯云的elasticsearch service服务。</p>

<h1 id="toc_1">客户端</h1>

<p>在客户端装上filebeat</p>

<pre><code class="language-text">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.5.1-x86_64.rpm
sudo rpm -vi filebeat-7.5.1-x86_64.rpm
</code></pre>

<p>编辑/etc/filebeat/filebeat.yml内容</p>

<pre><code class="language-text">filebeat.config.modules:
  path: ${path.config}/modules.d/*.yml
  reload.enabled: true
  reload.period: 10s
setup.kibana:
  host: &quot;xxxx.kibana.tencentelasticsearch.com:5601&quot;

output.elasticsearch:
      hosts: [&quot;172.16.16.8:9200&quot;]
      protocol: &quot;http&quot;
      username: &quot;elastic&quot;
      password: &quot;xxx&quot;
      
</code></pre>

<p>这里使用nginx module，上报一下nginx</p>

<pre><code class="language-text">filebeat modules enable nginx
filebeat modules list  # 查看启动之后的模块
# /etc/filebeat/modules.d/nginx.yml 填写相关nginx日志文件
filebeat setup
systemctl start filebeat
# 可使用filebeat -e 测试并打印一下
</code></pre>

<p>回到kibana查看dashboard与日志</p>

<h3 id="toc_2">nginx数据</h3>

<p><img src="media/16045584516905/16045588949397.jpg" alt=""/></p>

<h3 id="toc_3">系统cpu</h3>

<p><img src="media/16045584516905/16045589182355.jpg" alt=""/></p>

<h1 id="toc_4">总结</h1>

<p>使用云服务不用懂配置，直接就能使用了,相对监控来说，elk这块使用上更方便。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php微服务的分享]]></title>
    <link href="http://www.shengsheng.net/16002662215905.html"/>
    <updated>2020-09-16T22:23:41+08:00</updated>
    <id>http://www.shengsheng.net/16002662215905.html</id>
    <content type="html"><![CDATA[
<p>几分钟写的ppt，讲了一小时。<br/>
<img src="media/16002662215905/16002662808301.jpg" alt=""/></p>

<p><img src="media/16002662215905/16002663188569.jpg" alt=""/></p>

<p>多交流交流！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[运营后台相关参数]]></title>
    <link href="http://www.shengsheng.net/15983439644690.html"/>
    <updated>2020-08-25T16:26:04+08:00</updated>
    <id>http://www.shengsheng.net/15983439644690.html</id>
    <content type="html"><![CDATA[
<p>整理一下通用后台用到的统计标准，一文说清所有的指标。</p>

<h2 id="toc_0">实用指标</h2>

<p>日期<br/>
区服<br/>
新增注册数：规定区服条件下的新增注册玩家数<br/>
老用户：规定区服条件下的非当日新增注册的登陆玩家数<br/>
DAU：新增注册数+老用户 （日活跃用户）<br/>
新用户付费金额：新增注册玩家的总付费金额 （新总）<br/>
总付费金额：新增注册玩家+老用户产生的总充值金额 （新+老）<br/>
新用户付费人数：新增注册玩家中充值玩家总数 （新付人数）<br/>
新增付费率：新用户付费数/新增注册数 （新付数/新)<br/>
总付费人数：新增注册玩家+老用户产生的总充值人数 (新付+老付)<br/>
注册ARPPU：新用户付费金额/新用户付费人数 （新付/新付数）<br/>
活跃ARPPU：总付费金额/总付费人数  （总付/总付人）<br/>
活跃付费率：总付费人数/DAU  (总付数/活跃人数)<br/>
活跃ARPU：活跃ARPPU<em>活跃付费率 (arppu</em>付费率，也可以= 总付金额/dau)<br/>
至今（LTV和充值类型数据 可加入）<br/>
活跃ARPU：活跃ARPPU*活跃付费率 （同上，很好理解，反过来的逻辑）<br/>
新增付费率 = （新增付费人数 / 新增注册数) <br/>
活跃付费率 = 付费用户数 / 总用户数<br/>
注册ARPU = 新增人数付费金额 / 新增注册数<br/>
注册ARPPU = 新增人数付费金额 / 新增付费人数<br/>
活跃ARPU = 付费金额 / 总用户数<br/>
活跃ARPPU = 付费金额 / 付费人数<br/>
活跃付费率 = 付费用户 / 总用户数<br/>
注册成本 = 成本 / 新增注册数 <br/>
激活注册率 = 注册 / 激活数  （这个要创角上传的情况下）<br/>
激活成本 = 成本 / 激活数     （激活看是否注册还是创角）<br/>
创角率 = 创角数 / 新增注册数<br/><br/>
DNU（Daily New Users）： 每日游戏中的新登入用户数量<br/>
AU（Active Users）：活跃用户，统计周期内，登录过游戏的用户数<br/>
相应的，根据统计周期，有DAU(日活跃用户)，WAU(周活跃用户),MAU(月活跃用户)等。<br/>
PU ( Paying User）：付费用户<br/>
APA（Active Payment Account）：活跃付费用户数<br/>
这里我们要注意“用户”和“付费用户”的区分，这也将影响收入的计算。<br/>
ARPU(Average Revenue Per User) ：平均每用户收入，即可通过 总收入/AU 计算得出。(平均收入每个用户)<br/>
ARPPU (Average Revenue Per Paying User)： 平均每付费用户收入，可通过 总收入/APA 计算得出。（平均收入每个付费用户)<br/>
PUR(Pay User Rate)：付费比率，可通过 APA/AU 计算得出。<br/>
LTV(Lift Time Value)：生命周期价值，即平均一个用户在首次登录游戏到最后一次登录游戏内，为该游戏创造的收入总计<br/>
投资回报率（ROI）=产出（销售收入）/ 投入（成本<br/>
至今LTV = 累积金额 / 总人数<br/>
苹果至今=苹果内购累积金额/注册数<br/>
苹果付费金额</p>

<h2 id="toc_1">其它</h2>

<p>CPA：<br/>
Cost Per Action 每效果成本——即按照效果付费。</p>

<p>CPC：<br/>
Cost Per Click;Cost Per Thousand Click-Through 每点击成本。</p>

<p>CPT：<br/>
Cost Per Time，CPT 是一种以时间来计费的广告。</p>

<p>CPS：<br/>
英文全称 Cost Per Sales。CPS 是一种以实际销售产品数量来计算广告费用的广告。</p>

<p>CPPA：<br/>
按照到达用户付费。既不是按照浏览量（PV）付费，也不是按照实际效果付费，而是按照到达的用户那个付费，在网站上等同于 UV，在手机端是新增用户上游数据（例如用户已下载安装还未打开激活 APP 的数量即为到达用户）</p>

]]></content>
  </entry>
  
</feed>
